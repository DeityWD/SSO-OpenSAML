<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.sms.project.user.dao.UserDao">
	<insert id="insert" parameterType="org.sms.project.user.entity.User">
		insert into user (ID,
		NAME, IMAGE_PATH, LOGIN_ID, PASSWORD,
		EMAIL, PHONE, ADRESS, CONFIRMNUM,
		LOGIN_SUM, LAST_LOGIN_IP, USABLE_STATUS, TOKEN,
		LOGIN_TYPE)
		values ( #{id},
		#{name,jdbcType=VARCHAR}, #{image_path,jdbcType=VARCHAR}, #{login_id,jdbcType=VARCHAR},
		#{password,jdbcType=VARCHAR},
		#{email,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{adress,jdbcType=VARCHAR},
		#{confirmnum},
		#{login_sum}, #{last_login_ip}, #{usable_status},
		#{token},
		#{login_type})
	</insert>

	<delete id="delete" parameterType="long">
		delete from user where ID=#{id}
	</delete>

	<delete id="deleteMulti" parameterType="int">
		delete from user where ID in
		<foreach collection="array" index="index" item="item" open="("
			separator="," close=")">
			#{item}
		</foreach>
	</delete>

	<update id="update" parameterType="org.sms.project.user.entity.User">
		update user set
		NAME=#{name}, IMAGE_PATH=#{image_path},
		EMAIL=#{email},
		PHONE=#{phone}, ADRESS=#{adress,jdbcType=VARCHAR}, 
		LAST_LOGIN_IP=#{last_login_ip},
		MODIFY_DATE='${modify_date}'
		where ID=#{id}
	</update>

	<select id="get" parameterType="long" resultType="org.sms.project.user.entity.User">
		select user.ID,
		user.NAME, user.LOGIN_ID, user.EMAIL,
		user.PHONE, user.ADRESS 
		from user where user.ID=#{id}
	</select>
	
	<select id="getByLoginId" parameterType="string" resultType="org.sms.project.user.entity.User">
		select user.ID,
		user.NAME, user.LOGIN_ID, user.EMAIL,
		user.PHONE, user.ADRESS 
		from user where user.login_id=#{login_id}
	</select>

	<select id="getCount" parameterType="string" resultType="int"
		useCache="true">
		select count(user.ID) from user
		<if test="value != null and value.length > 0">
			where ${value}
		</if>
	</select>

	<select id="list" parameterType="map" resultType="org.sms.project.user.entity.User">
		select user.ID,
		user.NAME, user.LOGIN_ID, user.EMAIL,
		user.PHONE, user.ADRESS
		from user
		<if test="query != null and query != ''">
			where ${query}
		</if>
		<if test="orderStr != null and orderStr != ''">
			order by ${orderStr}
		</if>
	</select>
</mapper>